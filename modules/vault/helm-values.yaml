# ------------------------------------------------------------#
# These global values affect multiple components of the chart #
# ------------------------------------------------------------#

global:

  # The master enabled/disabled configuration. If this is true, most components
  # will be installed by default. If this is false, no components will be installed
  # by default and manually opting-in is required, such as by setting server.enabled to true
  enabled: true

  # References secrets to be used when pulling images from private registries.
  # See https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/ for more details.
  # May be specified as an array of name map entries or just as an array of names
  imagePullSecrets: []

  # When set to true, changes URLs from https to http
  # (such as the VAULT_ADDR=http://127.0.0.1:8200 environment variable set on the Vault pods)
  tlsDisable: true

  #  If true, enables configuration specific to OpenShift such as
  #  NetworkPolicy, SecurityContext, and Route
  openshift: false

  # Pod Security Policy configuration
  psp:
    # When set to true, enables Pod Security Policies for Vault and Vault Agent Injector
    enable: false
    # This value defines additional annotations to add to the Pod Security Policies.
    # This can either be YAML or a YAML-formatted multi-line templated string
    annotations: {}


# ----------------------------------------------------------------------------------------------------#
# Values that configure running a Vault Agent Injector Admission Webhook Controller within Kubernetes #
# ----------------------------------------------------------------------------------------------------#

injector:

  # When set to true, the Vault Agent Injector Admission Webhook controller will be created
  enabled: true

  # External vault server address for the injector to use.
  # A non empty string here will disable deployment of the vault server, and only deploy the injector.
  # A service account with token review permissions is automatically created if
  # server.serviceAccount.create=true is set for the external Vault server to use
  externalVaultAddr: ""

  # The number of pods to deploy to create a highly available cluster of Vault Agent Injectors.
  # Requires Vault K8s 0.7.0 to have more than 1 replica
  replicas: 1

  # Values that configure the Vault Agent Injector leader election for HA deployments
  leaderElector:
    # When set to true, enables leader election for Vault Agent Injector.
    # This is required when using auto-tls and more than 1 replica
    enabled: true
    # Values that configure the Vault Agent Injector Leader Election image
    image:
      # This is the default image, I don't know much about it
      repository: "gcr.io/google_containers/leader-elector"
      tag: "0.4"
    # The frequency in which leader elections are performed in the Vault Agent Injector cluster
    ttl: "60s"

  # Values that configure the Vault Agent Injector Docker image
  image:
    # Default image, can be found at https://github.com/hashicorp/vault-k8s
    repository: "hashicorp/vault-k8s"
    tag: "0.12.0"
    # Skip pulling the image if it already exists
    pullPolicy: "IfNotPresent"

  # Values that configure the Vault Agent Injector Docker image
  agentImage:
    # Default image, can be fount at https://github.com/hashicorp/docker-vault
    repository: "vault"
    tag: "1.8.2"

  # Values that configure the injected Vault Agent containers default values
  agentDefaults:
    # These are the default values from the Helm Chart
    cpuLimit: "500m"
    cpuRequest: "250m"
    memLimit: "128Mi"
    memRequest: "64Mi"
    # The default template type for rendered secrets if no custom templates are defined.
    # Possible values include map and json
    template: "map"
    # Default values within Agent's template_config stanza
    # (https://www.vaultproject.io/docs/agent/template-config)
    templateConfig:
      # Controls whether Vault Agent exits after it has exhausted its number
      # of template retry attempts due to failures
      exitOnRetryFailure: true

  # Values that configure the Vault Agent Injector metric exporter
  metrics:
    # When set to true, the Vault Agent Injector exports Prometheus metrics at the /metrics path
    enabled: false

  # Mount path of the Vault Kubernetes Auth Method
  authPath: "auth/kubernetes"

  # Configures the log verbosity of the injector.
  # Supported log levels: trace, debug, error, warn, info
  logLevel: "info"

  # Configures the log format of the injector.
  # Supported log formats: "standard", "json"
  logFormat: "standard"

  # Configures all Vault Agent sidecars to revoke their token when shutting down
  revokeOnShutdown: false

  # Resource requests and limits (CPU, memory, etc.) for each container of the server.
  # This should be a YAML dictionary of a Kubernetes ResourceRequirements object.
  # If this isn't specified, then the pods won't request any specific amount of resources,
  # which limits the ability for Kubernetes to make efficient use of compute resources.
  # Setting this is highly recommended.
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "256Mi"
      cpu: "250m"

  # Selector used by the admission webhook controller to limit what namespaces
  # where injection can happen. If set to null, all non-system namespaces are eligible for injection.
  # Selectors are defined as a YAML dictionary.
  namespaceSelector: {}
    # In this example, all namespaces with the label "injection: enabled" are eligible
    # matchLabels:
    #   injection: "enabled"

  # Selector used by the admission webhook controller
  # to limit what objects can be effected by mutation
  # Selectors are defined as a YAML dictionary.
  objectSelector: {}
    # In this example, all namespaces with the label "injection: enabled" are eligible
    # objectSelector:
    #   matchLabels:
    #     injection: enabled

  # Defines additional labels for Vault Agent Injector pods
  extraLabels: {}
    # 'sample/label1': 'foo'
    # 'sample/label2': 'bar'

  # The certs section configures how the webhook TLS certs are configured.
  # These are the TLS certs for the Kube apiserver communicating to the webhook.
  # By default, the injector will generate and manage its own certs, but this requires
  # the ability for the injector to update its own MutatingWebhookConfiguration.
  # In a production environment, custom certs should probably be used.
  certs:
    # Name of the Kubernetes secret that has the TLS certificate
    # and private key to serve the injector webhook.
    # If this is empty, then the injector will default to its automatic management mode
    secretName: ""
    # PEM-encoded CA public certificate bundle for the TLS certificate served by the injector.
    # This must be specified as a string and can't come from a secret because
    # it must be statically configured on the Kubernetes MutatingAdmissionWebhook resource.
    # This only needs to be specified if secretName is not empty
    caBundle: ""
    # Name of the certificate file within the secretName secret
    certName: "tls.crt"
    # Name of the key file within the secretName secret
    keyName: "tls.key"

  extraEnvironmentVars: {}
    # # Example
    # VAULT_CACERT: "/vault/userconfig/vault-certstore/vault.ca"

  # This value defines the affinity for Vault Agent Injector pods.
  # This can either be multi-line string or YAML matching the PodSpec's affinity field.
  # The following config allows only a single pod on each node,
  # which minimizes risk of the cluster becoming unusable if a node is lost
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/name: {{ template "vault.name" . }}-agent-injector
              app.kubernetes.io/instance: "{{ .Release.Name }}"
              component: webhook
          topologyKey: kubernetes.io/hostname
  # Toleration Settings for injector pods.
  # This should be either a multi-line string or YAML matching the Toleration array
  tolerations: []

  # Labels for injector pod assignment, formatted as a multi-line string or YAML map
  nodeSelector: {}

  # Priority class for injector pods
  priorityClassName: ""

  # Defines additional annotations for injector pods.
  # This can either be YAML or a YAML-formatted multi-line templated string
  annotations: |
    "vault.hashicorp.com/log-level": "trace"
    # "sample/annotation1": "foo"
    # "sample/annotation2": "bar"
  # When set to "Fail", an error calling the webhook causes the admission to fail
  # and the API request to be rejected. When set to Ignore, an error calling
  # the webhook is ignored and the API request is allowed to continue.
  # Allowed values: Fail, Ignore
  failurePolicy: "Ignore"

  # Extra annotations to attach to the MutatingWebhookConfiguration.
  # This can either be YAML or a YAML-formatted multi-line templated string
  webhookAnnotations: {}

  # The service section configures the Kubernetes service for the Vault Agent Injector
  service:
    # Defines additional annotations to add to the Vault Agent Injector service.
    # This can either be YAML or a YAML-formatted multi-line templated string
    annotations: {}
    # When set to true, configures the Vault Agent Injector to run on the host network.
    # This is useful when alternative cluster networking is used
    hostNetwork: false
    # Configures the port the Vault Agent Injector listens on
    port: 8080


# ---------------------------------------------------------------#
# Values that configure running a Vault server within Kubernetes #
# ---------------------------------------------------------------#

server:

  # When set to true, the Vault server will be created
  enabled: true

  # This value refers to a Kubernetes secret that you have created that contains
  # your enterprise license. If you are not using an enterprise image or if you
  # plan to introduce the license key via another route, then leave secretName
  # blank ("") or set it to null. Requires Vault Enterprise 1.8 or later
  enterpriseLicense:
    # The name of the Kubernetes secret that holds the enterprise license.
    # The secret must be in the same namespace that Vault is installed into
    secretName: ""
    # The key within the Kubernetes secret that holds the enterprise license
    # (this is the default value, but since we're not using enterprise it doesn't matter)
    secretKey: "license"

  # Configures the Vault Docker image
  image:
    # Default image, can be fount at https://github.com/hashicorp/docker-vault
    repository: "vault"
    tag: "1.8.2"
    # Skip pulling the image if it already exists
    pullPolicy: "IfNotPresent"

  # Configures the Update Strategy Type for the StatefulSet
  # (https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies)
  updateStrategyType: "OnDelete"

  # Configures the Vault server logging verbosity.
  # If set this will override values defined in the Vault configuration file.
  # Supported log levels include: trace, debug, info, warn, error
  logLevel: "info"

  # Configures the Vault server logging format.
  # If set this will override values defined in the Vault configuration file.
  # Supported log formats include: standard, json
  logFormat: "standard"

  # Resource requests and limits (CPU, memory, etc.) for each container of the server.
  # This should be a YAML dictionary of a Kubernetes ResourceRequirements object.
  # If this isn't specified, then the pods won't request any specific amount of resources,
  # which limits the ability for Kubernetes to make efficient use of compute resources.
  # Setting this is highly recommended
  resources:
    # These Resource Limits are in line with node requirements in the
    # Vault Reference Architecture for a Small Cluster
    requests:
      memory: 1Gi
      cpu: 1000m
    limits:
      memory: 2Gi
      cpu: 1000m

  # Configures Ingress services for Vault
  ingress:
    enabled: false

  # Configures Route services for Vault in OpenShift
  route:
    enabled: false

  # Configures the Ingress TLS rules
  tls:
    hosts: []
    secretName: null

  # Configures the Cluster Role Binding attached to the Vault service account
  authDelegator:
    # When set to true, a Cluster Role Binding will be bound to the Vault service account.
    # This Cluster Role Binding has the necessary privileges for Vault to use the Kubernetes Auth Method
    # (https://www.vaultproject.io/docs/auth/kubernetes)
    enabled: true

  # Readiness probe for the Vault pods (important for HA)
  readinessProbe:
    enabled: true

    # When set to a value, enables HTTP/HTTPS probes instead of using the default exec probe.
    # The http/https scheme is controlled by the tlsDisable value
    # path: "/v1/sys/health?standbyok=true"
    
    # How many probe failures will be tolerated by Kubernetes
    failureThreshold: null
    # Number of seconds after the container has started before probe initiates
    initialDelaySeconds: 5
    # How often (in seconds) to perform the probe
    periodSeconds: 10
    # Minimum consecutive successes for the probe to be considered successful after having failed
    successThreshold: 1
    # Number of seconds after which the probe times out
    timeoutSeconds: 3

  # Liveliness probe for the Vault pods (important for HA)
  livenessProbe:
    enabled: true

    # When set to a value, enables HTTP/HTTPS probes instead of using the default exec probe.
    # The http/https scheme is controlled by the tlsDisable value
    path: "/v1/sys/health?standbyok=true&sealedcode=200"
    
    # How many probe failures will be tolerated by Kubernetes
    failureThreshold: 2
    # Number of seconds after the container has started before probe initiates
    initialDelaySeconds: 60
    # How often (in seconds) to perform the probe
    periodSeconds: 5
    # Minimum consecutive successes for the probe to be considered successful after having failed
    successThreshold: 1
    # Number of seconds after which the probe times out
    timeoutSeconds: 3

  # Sleep time during the preStop step
  preStopSleepSeconds: 5

  # Commands to run after the pod is ready.
  # This can be used to automate processes such as initialization or bootstrapping auth methods
  postStart: []
    # # Examples
    # - /bin/sh
    # - -c
    # - /vault/userconfig/myscript/run.sh

  # List of init containers specified as a YAML list.
  # This is useful if you need to run a script to provision TLS certificates
  # or write out configuration files in a dynamic way
  extraInitContainers: null
    # # This example installs a plugin pulled from github into the /usr/local/libexec/vault/oauthapp folder,
    # # which is defined in the volumes value.
    # - name: oauthapp
    #   image: "alpine"
    #   command: [sh, -c]
    #   args:
    #     - cd /tmp &&
    #       wget https://github.com/puppetlabs/vault-plugin-secrets-oauthapp/releases/download/v1.2.0/vault-plugin-secrets-oauthapp-v1.2.0-linux-amd64.tar.xz -O oauthapp.xz &&
    #       tar -xf oauthapp.xz &&
    #       mv vault-plugin-secrets-oauthapp-v1.2.0-linux-amd64 /usr/local/libexec/vault/oauthapp &&
    #       chmod +x /usr/local/libexec/vault/oauthapp
    #   volumeMounts:
    #     - name: plugins
    #       mountPath: /usr/local/libexec/vault

  # The extra containers to be applied to the Vault server pods
  extraContainers: null
    # # Example
    # - name: mycontainer
    #   image: 'app:0.0.0'
    #   env: ...

  # The extra environment variables to be applied to the Vault server
  extraEnvironmentVars: {}
    # # Example
    # GOOGLE_REGION: global
    # GOOGLE_PROJECT: myproject
    # GOOGLE_APPLICATION_CREDENTIALS: /vault/userconfig/myproject/myproject-creds.json

  # Enables process namespace sharing between Vault and the extraContainers.
  # This is useful if Vault must be signaled, e.g. to send a SIGHUP for log rotation
  shareProcessNamespace: false

  # Extra arguments to be applied to the Vault server startup command
  extraArgs: null
  # extraArgs: '-config=/path/to/extra/config.hcl -log-format=json'

  # Extra environment variables populated from a secret to be applied to the Vault server.
  # This should be a multi-line key/value string
  extraSecretsEnvironmentVars: null
    # # Example
    # - envName: AWS_SECRET_ACCESS_KEY
    #   secretName: vault
    #   secretKey: AWS_SECRET_ACCESS_KEY

  # A list of volumes made available to all containers.
  # This takes standard Kubernetes volume definitions
  volumes: []

  # A list of volumes mounts made available to all containers.
  # This takes standard Kubernetes volume definitions
  volumeMounts: []

  # Defines the affinity for server pods.
  # This should be either a multi-line string or YAML matching the PodSpec's affinity field.
  # The following config allows only a single pod on each node,
  # which minimizes risk of the cluster becoming unusable if a node is lost
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app: {{ template "vault.name" . }}
              release: "{{ .Release.Name }}"
              component: server
          topologyKey: kubernetes.io/hostname
  # This value defines the tolerations that are acceptable when being scheduled.
  # This should be either a multi-line string or YAML matching the Toleration array in a PodSpec
  tolerations: []
  # # Example
  # tolerations: |
  #   - key: 'node.kubernetes.io/unreachable'
  #     operator: 'Exists'
  #     effect: 'NoExecute'
  #     tolerationSeconds: 6000

  # This value defines additional node selection criteria for more control
  # over where the Vault servers are deployed.
  # This should be formatted as a multi-line string or YAML map
  nodeSelector: {}
  # # Example
  # nodeSelector: |
  #   disktype: ssd

  # Configures the Vault Network Policy
  networkPolicy:
    # When set to true, enables a Network Policy for the Vault cluster
    enabled: false
    # Configures the egress network policy rules
    # (https://kubernetes.io/docs/concepts/services-networking/network-policies/)
    egress: []
    # # Example
    #   - to:
    #       - ipBlock:
    #           cidr: 10.0.0.0/24
    #     ports:
    #       - protocol: TCP
    #         port: 8200

  # Priority class for server pods
  priorityClassName: ""

  # Additional labels for server pods
  extraLabels: {}
    # # Example
    # 'sample/label1': 'foo'
    # 'sample/label2': 'bar'

  # This value defines additional annotations for server pods.
  # This can either be YAML or a YAML-formatted multi-line templated string
  annotations: {}
    # "sample/annotation1": "foo"
    # "sample/annotation2": "bar"

  # Configures the Kubernetes service created for Vault.
  # These options are also used for the active and standby services when ha is enabled
  service:
    # When set to true, a Kubernetes service will be created for Vault
    enabled: true

    # ClusterIP controls whether an IP address (cluster IP) is attached to the Vault service within Kubernetes.
    # By default the Vault service will be given a Cluster IP address, set to None to disable.
    # When disabled Kubernetes will create a "headless" service.
    # Headless services can be used to communicate with pods directly through DNS instead of a round robin load balancer
    # clusterIP: 
    
    # Type of service to create (can also be a NodePort)
    type: "ClusterIP"
    # Port on which Vault server is listening inside the pod
    port: 8200
    # Port on which the service is listening
    targetPort: 8200

    # When type is set to NodePort, the bound node port can be configured using this value.
    # A random port will be assigned if this is left blank.
    # nodePort:

    # This value defines additional annotations for the service.
    # This can either be YAML or a YAML-formatted multi-line templated string.
    annotations: {}
      # "sample/annotation1": "foo"
      # "sample/annotation2": "bar"

  # Configures the Kubernetes service account created for Vault
  serviceAccont:
    create: true
    name: "vault"
    # This value defines additional annotations for the service account
    # This can either be YAML or a YAML-formatted multi-line templated string.
    annotations: {}
      # "sample/annotation1": "foo"
      # "sample/annotation2": "bar"

  # Configures the volume used for storing Vault data when not using external storage such as Consul
  dataStorage:
    enabled: false

  # Configures the volume used for storing Vault's audit logs. See the Vault documentation for more information
  # (https://www.vaultproject.io/docs/audit)
  auditStorage:
    enabled: false

  # Configures dev mode for the Vault server
  dev:
    enabled: false

  # Configures standalone mode for the Vault server
  standalone:
    enabled: false

  # This configures High Availability mode for the Vault server
  ha:
    # Enables ha mode for the Vault server.
    # This mode uses a highly available backend storage (such as Consul) to store Vault's data.
    # By default this is configured to use Consul Helm. For a complete list of storage backends, see the Vault documentation
    enabled: true
    # Number of pods to deploy to create a highly available cluster of Vault servers
    replicas: 3
    # Set the API address configuration for a Vault cluster.
    # If set to an empty string, the pod IP address is used
    apiAddr: ""

    # A raw string of extra HCL or JSON configuration for Vault servers.
    # This will be saved as-is into a ConfigMap that is read by the Vault servers.
    # This can be used to add additional configuration that isn't directly exposed by the chart.
    # In our case, we're configuring Vault to listen on any address
    # (THIS IS SUPER IMPORTANT, otherwise the authentication via Kubernetes won't work),
    # and use Consul as the storage backend
    config: null # Defined at the Terraform Vault Module (see modules/vault/main.tf)

    # If specified, all Pods with an ordinal that is greater than or equal
    # to the partition will be updated when the StatefulSet’s .spec.template is updated.
    # If set to 0, this disables partition updates.
    # For more information see the official Kubernetes documentation
    # (https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#rolling-updates)
    updatePartition: 0
    # Disables RAFT since we're going to use Consul
    raft:
      enabled: false

  # Values that configures the disruption budget policy.
  # See the official Kubernetes documentation for more information
  # (https://kubernetes.io/docs/tasks/run-application/configure-pdb/)
  disruptionBudget:
    # Enables disruption budget policy to limit the number of pods that
    # are down simultaneously from voluntary disruptions
    enabled: true
    # The maximum number of unavailable pods.
    # By default, this will be automatically computed based on the server.replicas value to be (n/2)-1.
    # If you need to set this to 0, you will need to add a --set 'server.disruptionBudget.maxUnavailable=0'
    # flag to the helm chart installation command because of a limitation in the Helm templating language
    maxUnavailable: null

  # Configures settings for the Vault Statefulset
  statefulset:
    # This value defines additional annotations to add to the Vault statefulset.
    # This can either be YAML or a YAML-formatted multi-line templated string
    annotations: {}
      # kubernetes.io/my-statefulset: foobar


#------------------------------------#
# Values that configure the Vault UI #
#------------------------------------#

ui:

  # If true, the UI will be enabled. The UI will only be enabled on Vault servers.
  # If server.enabled is false, then this setting has no effect.
  enabled: false

  # The service type to register. The available service types are documented on the Kubernetes website.
  # (https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types)
  serviceType: "LoadBalancer"

  # Exposes the service on the specified port within the cluster.
  # Other pods within the cluster can communicate with this server on the specified port
  externalPort: 8200

  # Port on which the service will send requests to
  targetPort: 8200

  # Exposes the service externally to the cluster on this port when using a NodePort
  serviceNodePort: null

  # Route traffic to Vault pods that aren't ready (sealed or uninitialized)
  publishNotReadAddresses: false

  # The UI only route to the active pod in a Vault HA cluster
  activeVaultPodOnly: true
  
  # IP address of the load balancer when using serviceType: LoadBalancer
  loadBalancerIP: ""

  loadBalancerSourceRanges: []
    # - 10.0.0.0/16
    # - 120.78.23.3/32

  # Defines additional annotations for the UI service.
  # This can either be YAML or a YAML-formatted multi-line templated string
  annotations: {}
    # "sample/annotation1": "foo"
    # "sample/annotation2": "bar"


#-----------------------------------------------------#
# Configure the Vault CSI Provider                    #
# (https://www.vaultproject.io/docs/platform/k8s/csi) #
#-----------------------------------------------------#

csi:
  enabled: false
